// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menu.query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO "menu_item" ("name", "description", "price", "qty")
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, price, qty
`

type CreateMenuParams struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Qty         int32   `json:"qty"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, createMenu,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Qty,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Qty,
	)
	return i, err
}

const deleteMenuById = `-- name: DeleteMenuById :exec
DELETE FROM "menu_item" WHERE "id" = $1
`

func (q *Queries) DeleteMenuById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMenuById, id)
	return err
}

const getAllMenu = `-- name: GetAllMenu :many
SELECT id, name, description, price, qty FROM "menu_item"
`

func (q *Queries) GetAllMenu(ctx context.Context) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getAllMenu)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Qty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvailableMenuItems = `-- name: GetAvailableMenuItems :many
SELECT id, name, description, price, qty FROM "menu_item"
WHERE "qty" IS NULL OR "qty" > 0
`

func (q *Queries) GetAvailableMenuItems(ctx context.Context) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getAvailableMenuItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Qty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuById = `-- name: GetMenuById :one
SELECT id, name, description, price, qty FROM "menu_item" WHERE "id" = $1
`

func (q *Queries) GetMenuById(ctx context.Context, id uuid.UUID) (MenuItem, error) {
	row := q.db.QueryRow(ctx, getMenuById, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Qty,
	)
	return i, err
}

const getMenuByName = `-- name: GetMenuByName :many
SELECT id, name, description, price, qty FROM "menu_item"
WHERE "name" ILIKE '%' || $1 || '%'
`

func (q *Queries) GetMenuByName(ctx context.Context, dollar_1 pgtype.Text) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getMenuByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Qty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reduceQtyById = `-- name: ReduceQtyById :exec
UPDATE "menu_item"
SET "qty" = "qty" - $2
WHERE "id" = $1 AND ("qty" IS NULL OR "qty" >= $2)
`

type ReduceQtyByIdParams struct {
	ID  uuid.UUID `json:"id"`
	Qty int32     `json:"qty"`
}

func (q *Queries) ReduceQtyById(ctx context.Context, arg ReduceQtyByIdParams) error {
	_, err := q.db.Exec(ctx, reduceQtyById, arg.ID, arg.Qty)
	return err
}

const updateMenuById = `-- name: UpdateMenuById :one
UPDATE "menu_item"
SET "name" = $2,
    "description" = $3,
    "price" = $4,
    "qty" = $5
WHERE "id" = $1
RETURNING id, name, description, price, qty
`

type UpdateMenuByIdParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Price       float64   `json:"price"`
	Qty         int32     `json:"qty"`
}

func (q *Queries) UpdateMenuById(ctx context.Context, arg UpdateMenuByIdParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, updateMenuById,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Qty,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Qty,
	)
	return i, err
}

const updateMenuItemQty = `-- name: UpdateMenuItemQty :exec
UPDATE "menu_item" SET "qty"=$2 WHERE "id"=$1
`

type UpdateMenuItemQtyParams struct {
	ID  uuid.UUID `json:"id"`
	Qty int32     `json:"qty"`
}

func (q *Queries) UpdateMenuItemQty(ctx context.Context, arg UpdateMenuItemQtyParams) error {
	_, err := q.db.Exec(ctx, updateMenuItemQty, arg.ID, arg.Qty)
	return err
}

const updateMenuQtyById = `-- name: UpdateMenuQtyById :one
UPDATE "menu_item"
SET "qty" = $2
WHERE "id" = $1
RETURNING id, name, description, price, qty
`

type UpdateMenuQtyByIdParams struct {
	ID  uuid.UUID `json:"id"`
	Qty int32     `json:"qty"`
}

func (q *Queries) UpdateMenuQtyById(ctx context.Context, arg UpdateMenuQtyByIdParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, updateMenuQtyById, arg.ID, arg.Qty)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Qty,
	)
	return i, err
}
